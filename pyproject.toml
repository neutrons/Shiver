[project]
name = "shiver"
description = "Spectroscopy Histogram Visualizer for Event Reduction"
dynamic = ["version"]
requires-python = ">=3.10"
readme = "README.md"
license = { text = "GPL3.0" }
keywords = ["neutrons", "Spectroscopy", "data visualization"]

[project.urls]
homepage = "https://github.com/neutrons/Shiver/"
repository = "https://github.com/neutrons/Shiver/"
documentation = "https://neutrons.github.io/Shiver/"

[project.gui-scripts]
shiver = "shiver.shiver:gui"

[build-system]
requires = [
  "hatchling",
  "versioningit"
]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "versioningit"

[tool.hatch.build]
artifacts = ["*.yml", "*.yaml", "*.json"]

[tool.hatch.build.hooks.versioningit-onbuild]
source-file = "src/shiver/_version.py"
build-file = "shiver/_version.py"

[tool.hatch.build.targets.wheel]
packages = ["src/shiver"]

[tool.versioningit.write]
file = "src/shiver/_version.py"

[tool.versioningit.vcs]
method = "git"
default-tag = "4.0.0"

[tool.versioningit.next-version]
method = "minor"

[tool.versioningit.format]
distance = "{next_version}.dev{distance}"
dirty = "{version}"
distance-dirty = "{next_version}.dev{distance}"

[tool.pylint]
max-line-length = 120
disable = ["too-many-locals",
           "too-many-statements",
           "too-many-instance-attributes",
           "too-many-arguments",
           "too-many-positional-arguments",
           "duplicate-code"
]
extension-pkg-whitelist = ["PyQt5"]
ignore = ["pixi.lock"]


# ------------------ #
# Pixi configuration #
# ------------------ #
[tool.pixi.workspace]
preview = ["pixi-build"] # Need this to access pixi-build feature
platforms = ["linux-64"]
channels = [
  "conda-forge",
  "mantid-ornl",
  "mantid",
  "mantid-ornl/label/rc",
  "oncat",
  "neutrons",
  "neutrons/label/rc",
  "https://prefix.dev/pixi-build-backends"
]

[tool.pixi.package]
name = "shiver"
version = "0.0.0" # placeholder, can be updated by task sync-version

[tool.pixi.package.build]
backend = { name = "pixi-build-python", version = "0.1.*" }

[tool.pixi.package.host-dependencies]
hatchling = "*"
versioningit = "*"

[tool.pixi.package.run-dependencies]
#dependencies for the conda package - for shiver to run
mantidworkbench = "==6.12.0.1"
pyoncatqt =">=1.2.1rc1"
configupdater = "*"

[tool.pixi.dependencies]
# Conda package dependencies for the local environment though pixi
mantidworkbench = "==6.12.0.1"
pyoncatqt =">=1.2.1rc1"
configupdater = "*"

[tool.pixi.pypi-dependencies]
# PyPI dependencies for the local environment though pixi
#including this package to allow local editable installs
shiver = { path = ".", editable = true }

[tool.pixi.environments]
#environment definitions with feature dependencies
default = { features = ["package", "developer","docs","test",], solve-group = "default" }

[tool.pixi.feature.package.dependencies]
#conda package
anaconda-client = ">=1.13.0"
check-wheel-contents = ">=0.6.2"
versioningit = ">=3.2.0"
#python package
pip = "*"

[tool.pixi.feature.package.pypi-dependencies]
toml-cli = "*"

#code analysis tools
[tool.pixi.feature.developer.dependencies]
pip = ">=25.1.1"
pip-audit = ">=2.9.0"
pre-commit = ">=4.2.0"
pylint = "*"
codecov = ">=2.1.13"

#readthedocs
[tool.pixi.feature.docs.dependencies]
sphinx = ">=8"
sphinx_rtd_theme = ">=3.0.1"

#pytest
[tool.pixi.feature.test.dependencies]
pytest = ">=8.4.1"
pytest-qt = ">=4.4.0"
pytest-cov = ">=6.2.1"
pytest-mock = ">=3.14.1"
pytest-xvfb = ">=3.1.1"

[tool.pixi.tasks]
# Documentation
build-docs = { cmd = 'sphinx-build -b html docs/source/ docs/_build/html', description = "Build documentation" }
test-docs = { cmd = "sphinx-build -M doctest docs/source/ docs/_build/html", description = "Test building the documentation" }
# Testing
test = { description = "Run the test suite", cmd = "pytest" }
# Packaging
conda-build-command = { cmd = "pixi build", description = "Wrapper for building the conda package - used by `conda-build`" }
conda-build = { description = "Build the conda package", depends-on = [
    "sync-version",
    "conda-build-command",
    "reset-version",
] }
conda-publish = { cmd = "anaconda upload *.conda", description = "Publish the .conda package to anaconda.org", depends-on = [
    "conda-build",
] }
# Misc
audit-deps = { cmd = "pip-audit --local -s osv", description = "Audit the package dependencies for vulnerabilities" }
clean = { cmd = 'rm -rf .pytest_cache .ruff_cache **/*.egg-info **/dist **/__pycache__ **/_version.py', description = "Clean up various caches and build artifacts" }
clean-conda = { cmd = "rm -f *.conda", description = "Clean the local .conda build artifacts" }
clean-docs = { cmd = "rm -rf docs/_build", description = "Clean up documentation build artifacts" }
clean-all = { description = "Clean all artifacts", depends-on = [
    "clean",
    "clean-conda",
    "clean-docs",
] }
sync-version = { cmd = 'version=$(python -m versioningit); toml set tool.pixi.package.version "$version" --toml-path pyproject.toml', description = "Sync pyproject.toml version with Git version" }
reset-version = { cmd = "toml set tool.pixi.package.version \"0.0.0\" --toml-path pyproject.toml", description = "Reset the package version to 0.0.0" }
